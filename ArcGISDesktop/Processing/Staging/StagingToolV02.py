# ---------------------------------------------------------------------------
# StagingToolV01.py
# Created on: 2012-10-22 15:39:10.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: StagingToolV01 <FolderLocation> <myStagingArea> <myGDB_gdb> <Cogent_Census_Final> <TWT_roads> <TWT_midmile> <strata_wireless> <Level3> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, os, string

# Script arguments
FolderLocation = arcpy.GetParameterAsText(0)
if FolderLocation == '#' or not FolderLocation:
    FolderLocation = "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool" # provide a default value if unspecified

myStagingArea = arcpy.GetParameterAsText(1)
if myStagingArea == '#' or not myStagingArea:
   myStagingArea = "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\StagingArea" # provide a default value if unspecified

myGDB_gdb = arcpy.GetParameterAsText(2)
if myGDB_gdb == '#' or not myGDB_gdb:
    myGDB_gdb = "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\StagingArea\\myGDB.gdb" # provide a default value if unspecified

censusInput = arcpy.GetParameterAsText(3)
if censusInput == '#' or not censusInput:
    censusInput = "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\mockGDB.gdb\\Cogent_Census_Final" # provide a default value if unspecified

# Local variables:
analyst = "\"fischerw\""  #arcpy.GetParameterAsText(8)
lookup = r"C:\Users\fischerw\GOIT\ArcGISTool\Working\StGISTool\lookup.gdb\lookup"

# Process: Create Folder
try:
    arcpy.CreateFolder_management(FolderLocation, "StagingArea")
    print "folder created"
except:
    print "File already exists"

# Process: Create File GDB
arcpy.CreateFileGDB_management(myStagingArea, "myGDB", "CURRENT")
print "File GDB created"

# Process: Census
arcpy.CreateFeatureclass_management(myGDB_gdb, "census", "POLYGON", "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\StagingTemplate.gdb\\census", "DISABLED", "DISABLED", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision", "", "0", "0", "0")
print "Feature Class Created"

arcpy.env.workspace = "C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\StagingArea\\myGDB.gdb"
arcpy.Append_management("C:\\Users\\fischerw\\GOIT\\ArcGISTool\\Working\\StGISTool\\mockGDB.gdb\\Cogent_Census_Final", "census", "NO_TEST", "", "")
print arcpy.GetMessages()

# Process: Calculate Fields
arcpy.CalculateField_management("census", "STATEFIPS", "\"08\"", "VB", "")
arcpy.CalculateField_management("census", "COUNTYFIPS", "mid ( [FULLFIPSID],3,3 )", "VB", "")
arcpy.CalculateField_management("census", "TRACT", "mid ( [FULLFIPSID],6,6)", "VB", "")
arcpy.CalculateField_management("census", "BLOCKID", "left ( [FULLFIPSID],4)", "VB", "")
print "Calculation FIPS complete"
arcpy.AddField_management("census", "WHO", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.CalculateField_management("census", "WHO", analyst, "VB", "")
print "Add Field WHO"
arcpy.AddField_management("census", "WHEN", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.CalculateField_management("census", "WHEN", "Date (  )", "VB", "")
print "Add field WHEN"

# Create list of ProvAlias found in Provider data
provListRows = arcpy.UpdateCursor("census", "", "", "PROVALIAS; PROVNAME; DBNAME; FRN", "") 
provListRow = provListRows.next()
provaliasList = []

for provListRow in provListRows: 
    print "provalias: %s, provname: %s, dbaname: %s, frn: %s" % \
        (provListRow.PROVALIAS, provListRow.PROVNAME, provListRow.DBNAME, provListRow.FRN)
    if provListRow.PROVALIAS not in provaliasList:
        provaliasList.append(provListRow.PROVALIAS)
        print provListRow.PROVALIAS," added to provaliasList"
rows = arcpy.UpdateCursor("census", "", "", "PROVALIAS; PROVNAME; DBNAME; FRN; ENDUSERCAT; PROVIDER_TYPE", "") 
row = rows.next()
while row:
    if row.getValue('PROVALIAS') in provaliasList:
        tempProv = row.getValue('PROVALIAS')
        print "tempProv=" + tempProv
        dataEndUser = row.getValue('ENDUSERCAT')
        dataProvType = row.getValue('PROVIDER_TYPE')

        lookupRows = arcpy.UpdateCursor(lookup, "", "", "PROVALIAS; PROVNAME; DBNAME; FRN; ENDUSERCAT; PROVIDER_TYPE", "")
        lookupRow = lookupRows.next()
        while lookupRow:
            lookupProv = lookupRow.getValue('PROVALIAS')
            if lookupProv == tempProv:
                print "match", lookupProv
                lName = lookupRow.getValue('PROVNAME')
                print "ProvName: ", lName
                lDBA = lookupRow.getValue('DBNAME')
                print "DBA Name: ", lDBA
                lFRN = lookupRow.getValue('FRN')
                print "FRN: ", lFRN
                row.setValue('PROVNAME', lName)
                row.setValue('DBNAME', lDBA)
                row.setValue('FRN', lFRN)
                lEndUser = lookupRow.getValue('ENDUSERCAT')
                print "ENDUSERCAT: ", lEndUser
                lType = lookupRow.getValue('PROVIDER_TYPE')
                print "PROVIDER_TYPE: ", lType
                if dataEndUser is None:
                    row.setValue('ENDUSERCAT', lEndUser)
                    print "enduser populated"
                else:
                    print "enduser already exists: ", dataEndUser
                if dataProvType is None:
                    row.setValue('PROVIDER_TYPE', lType)
                    print "type populated"
                else:
                    print "type already exists: ", dataProvType
                    
            lookupRows.updateRow(lookupRow)
            lookupRow = lookupRows.next()
        del lookupRow, lookupRows
    else:
        print "error"
        row.setValue('PROVNAME', "no match")
    rows.updateRow(row)
    row = rows.next()

# Delete Fields
del row, rows
print "finished"
