# ---------------------------------------------------------------------------
# StagingToolV11.py
# Created on: 2012-10-22 15:39:10.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Takes processed GDB's and puts them in a standard format in the Staging Area
# Description: The tool has multiple steps:
#   1. Assumes data is loaded into staging template format
#   2. Creates a File geodatabase in appropriate workspace path
#   3. Creates new feature class with staging template and appends processed corresponding feature class
#   4. Takes new feature class and runs through a Look-Up table to populate ProvName, DBName, FRN, ProviderType, and EndUserCat where appropriate
#

# Edits from version 10 - Kass Rezagholi -   Re-wrote script for updated PLSS
#                                           fc's and for new field types..

# Future Enhancements: Instead of each type of FC, just do a search on the .gdb
# to find which parts of the script should run.
#
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, os, string

# Set Input Datasets
FolderLocation = arcpy.GetParameterAsText(0)

# Uncomment for production
myGDBtext = arcpy.GetParameterAsText(1)
plssInput = arcpy.GetParameterAsText(2)
midmileInput = arcpy.GetParameterAsText(3)
wirelessInput = arcpy.GetParameterAsText(4)

# Uncomment for testing
##myGDBtext = "test"
##plssInput = r"C:\GOIT\sanisabel\Processed\sanisabel.gdb\plss"
##midmileInput = ""
##wirelessInput = ""

myGDB = '%s\%s%s' % (FolderLocation, myGDBtext, ".gdb")
arcpy.env.workspace = myGDB

# Expression
analystName = arcpy.GetParameterAsText(5)
analyst1 = analystName.encode('utf-8')
analyst = '"%s"' %(analyst1)



# Lookup Table Path
lookup = r"P:\\SBDDGP-ARRA Project\\BroadbandProductionArea\\Workspaces\\BaseData\\lookup.gdb\\lookup"


plss = '%s\%s' % (myGDB, "plss")
wireless = '%s\%s' % (myGDB, "wireless")
midmile = '%s\%s' % (myGDB, "midmile")


# Process: Create File GDB
arcpy.env.overwriteOutput = True
if arcpy.Exists(myGDB):
    arcpy.AddMessage("File GDB already exists")
else:
    arcpy.CreateFileGDB_management(FolderLocation, myGDBtext, "CURRENT")
    arcpy.AddMessage("File GDB created")

if plssInput <>"":
    #
    #   PLSS
    #

    arcpy.AddMessage("Start PLSS Processing")
    arcpy.CreateFeatureclass_management(myGDB, "plss", "POLYGON", "P:\\SBDDGP-ARRA Project\\BroadbandProductionArea\\Workspaces\\BaseData\\StagingTemplate.gdb\\plss", "DISABLED", "DISABLED", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision", "", "0", "0", "0")
    arcpy.AddMessage("Feature Class Created")

    arcpy.Append_management(plssInput, plss, "NO_TEST", "", "")
    arcpy.AddMessage("PLSS Append Complete")

    # Process: Calculate Fields
    arcpy.AddField_management(plss, "WHO", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.AddMessage("Add Field WHO")
    arcpy.CalculateField_management(plss, "WHO", analyst, "VB", "")
    arcpy.AddMessage("Add field WHEN")
    arcpy.AddField_management(plss, "WHEN", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(plss, "WHEN", "Date (  )", "VB", "")


    # Create list of ProvAlias found in Provider data
    provListRows = arcpy.UpdateCursor(plss, "", "", "PROVALIAS; PROVNAME; DBANAME; FRN", "")
    provListRow = provListRows.next()
    provaliasList = []

    arcpy.AddMessage("checking PROVALIAS,TYPICUP,TYPICDOWN,SUBMAXDOWN,SUBMAXUP,PRICING")
    print "checking PROVALIAS,TYPICUP,TYPICDOWN,SUBMAXDOWN,SUBMAXUP,PRICING"
    for provListRow in provListRows:
        #print "provalias: %s, provname: %s, dbaname: %s, frn: %s, typicup: %s, typicdown: %s" % \
        #    (provListRow.PROVALIAS, provListRow.PROVNAME, provListRow.DBANAME, provListRow.FRN,provListRow.TYPICUP, provListRow.TYPICDOWN)
        if provListRow.PROVALIAS not in provaliasList:
            provaliasList.append(provListRow.PROVALIAS)
            print provListRow.PROVALIAS," added to provaliasList"
        if provListRow.TYPICUP not in provaliasList:
            provaliasList.append(provListRow.TYPICUP)
            print provListRow.TYPICUP, " added to provaliasList"
        if provListRow.TYPICDOWN not in provaliasList:
            provaliasList.append(provListRow.TYPICDOWN)
        if provListRow.MAXSUBDOWN not in provaliasList:
            provaliasList.append(provListRow.MAXSUBDOWN)
        if provListRow.MAXSUBUP not in provaliasList:
            provaliasList.append(provListRow.MAXSUBUP)
        if provListRow.PRICE not in provaliasList:
            provaliasList.append(provListRow.PRICE)
        if provListRow.CONFIDENCE not in provaliasList:
            provaliasList.append(provListRow.CONFIDENCE)
    rows = arcpy.UpdateCursor(plss)
    row = rows.next()
    arcpy.AddMessage("Populating PLSS data")
    while row:
        tempTYUP = row.getValue('TYPICUP')
        tempTYDO = row.getValue('TYPICDOWN')
        tempSUBDO = row.getValue('MAXSUBDOWN')
        tempSUBUP = row.getValue('MAXSUBUP')
        #tempPRICE = row.getValue('PRICE')
        if tempTYUP is None:
                print "tempTYUP is Null"
                row.setValue('TYPICUP', -9999)
                print "Set TYPICUP value to -9999"
        elif tempTYUP > 0:
                print "TYPICUP looks OK"
        else:
                print "TYPICUP done"

        if tempTYDO is None:
                print "tempTYUP is Null"
                row.setValue('TYPICDOWN', -9999)
                print "Set TYPICDOWN value to -9999"
        elif tempTYDO > 0:
                print "TYPICDOWN looks OK."
        else:
                print "TYPICDOWN done"
        if tempSUBDO is None:
                print "MAXSUBDOWN is Null"
                row.setValue('MAXSUBDOWN', -9999)
                print "Set MAXSUBDOWN value to -9999"
        elif tempSUBDO > 0:
                print "MAXSUBDOWN looks OK."
        else:
                print "MAXSUBDOWN done"
        if tempSUBUP is None:
                print "MAXSUBUP is Null"
                row.setValue('MAXSUBUP', -9999)
                print "Set MAXSUBUP value to -9999"
        elif tempSUBUP > 0:
                print "MAXSUBUP looks OK."
        else:
                print "MAXSUBUP done"
        #if tempPRICE is None:
                #print "PRICE is Null"
                #row.setValue('PRICE', -9999)
                #print "Set PRICE value to -9999"
        #elif tempPRICE > 0:
                #print "PRICE looks OK."
        #else:
                #print "PRICE done"



        if row.getValue('PROVALIAS') in provaliasList:
            tempProv = row.getValue('PROVALIAS')
            #print "tempProv=" + tempProv
            dataEndUser = row.getValue('ENDUSERCAT')
            dataProvType = row.getValue('PROVIDER_TYPE')

            lookupRows = arcpy.UpdateCursor(lookup, "", "", "PROVALIAS; PROVNAME; DBANAME; FRN; ENDUSERCAT; PROVIDER_TYPE", "")
            lookupRow = lookupRows.next()
            while lookupRow:
                lookupProv = lookupRow.getValue('PROVALIAS')
                if lookupProv == tempProv:
                    #print "match", lookupProv
                    lName = lookupRow.getValue('PROVNAME')
                    #print "ProvName: ", lName
                    lDBA = lookupRow.getValue('DBANAME')
                    #print "DBA Name: ", lDBA
                    lFRN = lookupRow.getValue('FRN')
                    #print "FRN: ", lFRN
                    row.setValue('PROVNAME', lName)
                    row.setValue('DBANAME', lDBA)
                    row.setValue('FRN', lFRN)
                    lEndUser = lookupRow.getValue('ENDUSERCAT')
                    #print "ENDUSERCAT: ", lEndUser
                    lType = lookupRow.getValue('PROVIDER_TYPE')
                    #print "PROVIDER_TYPE: ", lType
                    if dataEndUser is None:
                        row.setValue('ENDUSERCAT', lEndUser)
                        print "enduser populated"
                    else:
                        print "enduser already exists: ", dataEndUser
                    if dataProvType is None:
                        row.setValue('PROVIDER_TYPE', lType)
                        print "type populated"
                    else:
                        print "type already exists: ", dataProvType

                lookupRows.updateRow(lookupRow)
                lookupRow = lookupRows.next()
            del lookupRow, lookupRows
        else:
            #print "error"
            row.setValue('PROVNAME', "no match")
        rows.updateRow(row)
        row = rows.next()

    # Delete Fields
    del row, rows
    print "finished"
    arcpy.AddMessage("PLSS Finished")

if midmileInput <>"":

    #
    #   MIDMILE PROCESSING
    #
    arcpy.AddMessage("Start Midmile Processing")
    print "Start Midmile Processing"
    # Process: Create Feature Class (3)
    arcpy.CreateFeatureclass_management(myGDB, "midmile", "POINT", "P:\\SBDDGP-ARRA Project\\BroadbandProductionArea\\Workspaces\\BaseData\\StagingTemplate.gdb\\midmile", "DISABLED", "DISABLED", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision", "", "0", "0", "0")

    # Process: Append (3)
    arcpy.Append_management(midmileInput, midmile, "NO_TEST", "", "")
    print "Midmile appended"

    arcpy.CalculateField_management(midmile, "STATEABBR", "\"CO\"", "VB", "")
    print "Calculate STATEABBR"
    arcpy.AddField_management(midmile, "WHO", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(midmile, "WHO", analyst, "VB", "")
    print "WHO field added"
    arcpy.AddField_management(midmile, "WHEN", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(midmile, "WHEN", "Date (  )", "VB", "")
    print "WHEN field added"

    # Create list of ProvAlias found in Provider data
    provListRows = arcpy.UpdateCursor(midmile, "", "", "PROVALIAS; PROVNAME; DBANAME; FRN", "")
    provListRow = provListRows.next()
    provaliasList = []

    for provListRow in provListRows:
        print "provalias: %s, provname: %s, dbaname: %s, frn: %s" % \
            (provListRow.PROVALIAS, provListRow.PROVNAME, provListRow.DBANAME, provListRow.FRN)
        if provListRow.PROVALIAS not in provaliasList:
            provaliasList.append(provListRow.PROVALIAS)
            print provListRow.PROVALIAS," added to provaliasList"
        if provListRow.CONFIDENCE not in provaliasList:
            provaliasList.append(provListRow.CONFIDENCE)
    rows = arcpy.UpdateCursor(midmile, "", "", "PROVALIAS; PROVNAME; DBANAME; FRN", "")
    row = rows.next()
    while row:
        if row.getValue('PROVALIAS') in provaliasList:
            tempProv = row.getValue('PROVALIAS')
            print "tempProv=" + tempProv

            lookupRows = arcpy.UpdateCursor(lookup, "", "", "PROVALIAS; PROVNAME; DBANAME; FRN", "")
            lookupRow = lookupRows.next()
            while lookupRow:
                lookupProv = lookupRow.getValue('PROVALIAS')
                if lookupProv == tempProv:
                    print "match", lookupProv
                    lName = lookupRow.getValue('PROVNAME')
                    print "ProvName: ", lName
                    lDBA = lookupRow.getValue('DBANAME')
                    print "DBA Name: ", lDBA
                    lFRN = lookupRow.getValue('FRN')
                    print "FRN: ", lFRN
                    row.setValue('PROVNAME', lName)
                    row.setValue('DBANAME', lDBA)
                    row.setValue('FRN', lFRN)

                lookupRows.updateRow(lookupRow)
                lookupRow = lookupRows.next()
            del lookupRow, lookupRows
        else:
            print "error"
            row.setValue('PROVNAME', "no match")
        rows.updateRow(row)
        row = rows.next()

    # Delete Fields
    del row, rows
    print "finished"
    arcpy.AddMessage("Midmile Finished")

if wirelessInput <>"":

    #
    #   WIRELESS
    #
    arcpy.AddMessage("Start Wireless Processing")
    print "Start Wireless Processing"
    arcpy.CreateFeatureclass_management(myGDB, "wireless", "POLYGON", "P:\\SBDDGP-ARRA Project\\BroadbandProductionArea\\Workspaces\\BaseData\\StagingTemplate.gdb\\wireless", "DISABLED", "DISABLED", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision", "", "0", "0", "0")

    # Process: Append (4)
    arcpy.Append_management(wirelessInput, wireless, "NO_TEST", "", "")
    arcpy.AddMessage("Wireless Append Finished")
    arcpy.CalculateField_management(wireless, "STATEABBR", "\"CO\"", "VB", "")
    arcpy.AddMessage("Calculated STATECODE")
    arcpy.AddField_management(wireless, "WHO", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(wireless, "WHO", analyst, "VB", "")
    arcpy.AddMessage("WHO field added")
    arcpy.AddField_management(wireless, "WHEN", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(wireless, "WHEN", "Date (  )", "VB", "")
    arcpy.AddMessage("WHEN field added")

    # Create list of ProvAlias found in Provider data
    provListRows = arcpy.UpdateCursor(wireless)
    #provListRow = provListRows.next()
    provaliasList = []

    #for the current row in "wireless", print values
    for provListRow in provListRows:
        print "provalias: %s, provname: %s, dbaname: %s, frn: %s, typicup: %s, typicdown: %s" % \
            (provListRow.PROVALIAS, provListRow.PROVNAME, provListRow.DBANAME, provListRow.FRN,provListRow.TYPICUP, provListRow.TYPICDOWN)
        if provListRow.PROVALIAS not in provaliasList:
            provaliasList.append(provListRow.PROVALIAS)
            print provListRow.PROVALIAS," added to provaliasList"
        if provListRow.TYPICUP not in provaliasList:
            provaliasList.append(provListRow.TYPICUP)
            print provListRow.TYPICUP, " added to provaliasList"
        if provListRow.TYPICDOWN not in provaliasList:
            provaliasList.append(provListRow.TYPICDOWN)
        if provListRow.MAXSUBDOWN not in provaliasList:
            provaliasList.append(provListRow.MAXSUBDOWN)
        if provListRow.MAXSUBUP not in provaliasList:
            provaliasList.append(provListRow.MAXSUBUP)
        if provListRow.PRICE not in provaliasList:
            provaliasList.append(provListRow.PRICE)
        if provListRow.CONFIDENCE not in provaliasList:
            provaliasList.append(provListRow.CONFIDENCE)
    rows = arcpy.UpdateCursor(wireless)
    row = rows.next()
    while row:
        tempTYUP = row.getValue('TYPICUP')
        tempTYDO = row.getValue('TYPICDOWN')
        tempSUBDO = row.getValue('MAXSUBDOWN')
        tempSUBUP = row.getValue('MAXSUBUP')
        #tempPRICE = row.getValue('PRICE')
        if tempTYUP is None:
                print "tempTYUP is Null"
                row.setValue('TYPICUP', -9999)
                print "Set TYPICUP value to -9999"
        elif tempTYUP > 0:
                print "TYPICUP looks OK"
        else:
                arcpy.AddMessage("Error with TypicUp")
                print "Error with TYPICUP; check values entered"

        if tempTYDO is None:
                print "tempTYUP is Null"
                row.setValue('TYPICDOWN', -9999)
                print "Set TYPICDOWN value to -9999"
        elif tempTYDO > 0:
                print "TYPICDOWN looks OK."
        else:
                print "TYPICDOWN looks OK."
        if tempSUBDO is None:
                print "MAXSUBDOWN is Null"
                row.setValue('MAXSUBDOWN', -9999)
                print "Set MAXSUBDOWN value to -9999"
        elif tempSUBDO > 0:
                print "MAXSUBDOWN looks OK."
        else:
                print "Error with MAXSUBDOWN; check values entered"
        if tempSUBUP is None:
                print "MAXSUBUP is Null"
                row.setValue('MAXSUBUP', -9999)
                print "Set MAXSUBUP value to -9999"
        elif tempSUBUP > 0:
                print "MAXSUBUP looks OK."
        else:
                print "Error with MAXSUBUP; check values entered"
        #if tempPRICE is None:
                #print "PRICE is Null"
                #row.setValue('PRICE', -9999)
                #print "Set PRICE value to -9999"
        #elif tempPRICE > 0:
                #print "PRICE looks OK."
        #else:
                #print "Error with PRICE; check values entered"

        if row.getValue('PROVALIAS') in provaliasList:
            tempProv = row.getValue('PROVALIAS')
            print "tempProv=" + tempProv
            dataEndUser = row.getValue('ENDUSERCAT')

            lookupRows = arcpy.UpdateCursor(lookup, "", "", "PROVALIAS; PROVNAME; DBANAME; ENDUSERCAT; FRN", "")
            lookupRow = lookupRows.next()
            while lookupRow:
                lookupProv = lookupRow.getValue('PROVALIAS')
                if lookupProv == tempProv:
                    print "match", lookupProv
                    lName = lookupRow.getValue('PROVNAME')
                    print "ProvName: ", lName
                    lDBA = lookupRow.getValue('DBANAME')
                    print "DBA Name: ", lDBA
                    lFRN = lookupRow.getValue('FRN')
                    print "FRN: ", lFRN
                    row.setValue('PROVNAME', lName)
                    row.setValue('DBANAME', lDBA)
                    row.setValue('FRN', lFRN)
                    lEndUser = lookupRow.getValue('ENDUSERCAT')
                    if dataEndUser is None:
                        row.setValue('ENDUSERCAT', lEndUser)
                        print "enduser populated"
                    else:
                        print "enduser already exists: ", dataEndUser

                lookupRows.updateRow(lookupRow)
                lookupRow = lookupRows.next()
            del lookupRow, lookupRows
        rows.updateRow(row)
        row = rows.next()
    # Delete Fields
    del row, rows
    print "finished"
    arcpy.AddMessage("Wireless Finished")


print "Staging Complete"
arcpy.AddMessage("Staging complete for" + myGDB)
