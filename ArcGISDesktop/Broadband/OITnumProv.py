# ---------------------------------------------------------------------------
# numProvToolv5.py
# Created on: 2013-04-29 07:54:19.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: This tool will use the BB_Service_RoadSegment, BB_Service_CensusBlock,
# BB_Service_Wireless from the NTIA Final to create the Number of Provider layers for
# the website. Can create quad outputs with dissolve.  Must be merged with a edit session.
#
# Future Enhancements: Update 9.3 scripting, Find a solution to quad dissolve issue.
# Created by Kass Rezagholi
# ---------------------------------------------------------------------------

# Import arcpy module
import sys, string, os, time, traceback, arcgisscripting, arcpy
gp = arcgisscripting.create(9.3)
gp.overwriteoutput = True

# Script arguments
BB_Service_PLSS = arcpy.GetParameterAsText(0)
BB_Service_Wireless = arcpy.GetParameterAsText(1)
gdb = arcpy.GetParameterAsText(2)
xyTolerance = gp.GetParameterAsText(3)
decimalTolerance = gp.GetParameterAsText(4)
ovlpCountFieldName = "OVLP_COUNT"
polyIdFieldName = "POLY_ID"
statFieldName = ""
statType = ""

# Variables
mobileSelect = "in_memory\\mobileSelect"
wirelessSelect = "in_memory\\wirelessSelect"
mobileDissolve = "in_memory\\mobileDissolve"
satDissolve = "in_memory\\satDissolve"
satelliteSelect = "in_memory\\satelliteSelect"
fixedDissolve = "in_memory\\fixedDissolve"
plssDissolve = "in_memory\\plssDissolve"

# Process: Selects Mobile
try:
    arcpy.AddMessage("Attempting to select mobile only...")
    print "Selecting mobile only..."
    arcpy.Select_analysis(BB_Service_Wireless, mobileSelect, "\"TRANSTECH\" IN (80)")
    print "Select mobile complete"
except:
    print "Select mobile Error"

# Process: Dissolves Mobile
try:
    arcpy.AddMessage("Attempting to dissolve mobile by PROVNAME...")
    print "Attempting to dissolve mobile by PROVNAME..."
    arcpy.Dissolve_management(mobileSelect, mobileDissolve, "PROVNAME", "", "MULTI_PART", "DISSOLVE_LINES")
    print "Mobile dissolve complete"
except:
    print "Mobile dissolve error"

# Process: mobileFC
try:
    arcpy.AddMessage("Attempting to create FeatureClass...")
    print "Attempting to create FeatureClass"
    arcpy.FeatureClassToFeatureClass_conversion(mobileDissolve, gdb, "numProv_Mobile", "", "PROVNAME \"Provider_Name\" true true false 200 Text 0 0 ,First,#,In_Memory\\mobileDissolve,PROVNAME,-1,-1", "")
    print "numProv_Mobile FeatureClass created"
except:
    print "Error creating FeatureClass"
del mobileDissolve
del mobileSelect

# Process: Selects Satellite
try:
    arcpy.AddMessage("Attempting to select Satellite only...")
    print "Attempting to select Satellite only..."
    arcpy.Select_analysis(BB_Service_Wireless, satelliteSelect, "\"TRANSTECH\" IN (60)")
    print "Select Satellite complete"
except:
    print "Error selecting Satellite"

# Process: Dissolves Satellite
try:
    arcpy.AddMessage("Attempting to dissolve satellite by PROVNAME...")
    print "Attempting to dissolve satellite by PROVNAME"
    arcpy.Dissolve_management(satelliteSelect, satDissolve, "PROVNAME", "", "MULTI_PART", "DISSOLVE_LINES")
    print "Satellite dissolve complete"
except:
    print "Error dissolving satellite"

try:
    arcpy.AddMessage("Attempting to create FeatureClass...")
    print "Attempting to create FeatureClass..."
    arcpy.FeatureClassToFeatureClass_conversion(satDissolve, gdb, "numProv_Satellite", "", "PROVNAME \"Provider_Name\" true true false 200 Text 0 0 ,First,#,In_Memory\\satelliteDissolve,PROVNAME,-1,-1", "")
    print "numProv_Satellite FeatureClass created"
except:
    print "Error creating FeatureClass"
del satDissolve
del satelliteSelect

# Process: Selects Fixed
try:
    arcpy.AddMessage("Attempting to select fixed wireless...")
    print "Attempting to select fixed wireless..."
    arcpy.Select_analysis(BB_Service_Wireless, wirelessSelect, "\"TRANSTECH\" IN (70, 71)")
    print "Fixed wireless selected"
except:
    print "Error selecting Fixed Wireless"

# Process: Dissolved Fixed
try:
    arcpy.AddMessage("Attempting to dissolve fixed wireless coverage by PROVNAME...")
    print "Attempting to dissolve fixed wireless by PROVNAME..."
    arcpy.Dissolve_management(wirelessSelect, fixedDissolve, "PROVNAME", "", "MULTI_PART", "DISSOLVE_LINES")
    print "Fixed wireless dissolve complete"
except:
    print "Error dissolving fixed wireless"

# Process: fixedFC
try:
    arcpy.AddMessage("Attempting to create FeatureClass...")
    print "Attempting to create FeatureClass..."
    arcpy.FeatureClassToFeatureClass_conversion(fixedDissolve, gdb, "numProv_Fixed", "", "", "")
    print "numProv_Fixed FeatureClass created"
except:
    print "Error creating FeatureClass"
del wirelessSelect
del fixedDissolve

# Process: Dissolves PLSS by Provname
try:
    arcpy.AddMessage("Attempting to dissolve for wireline by PROVNAME...")
    print "Attempting to dissolve for wireline by PROVNAME..."
    arcpy.Dissolve_management(BB_Service_PLSS, plssDissolve, "PROVNAME", "", "MULTI_PART", "DISSOLVE_LINES")
    print "Dissolve complete"
except:
    print "Error completing dissolve"

# Process: wirelineFC
try:
    arcpy.AddMessage("Attempting to create FeatureClass...")
    print "Attempting to create FeatureClass..."
    arcpy.FeatureClassToFeatureClass_conversion(plssDissolve, gdb, "numProv_Wireline", "", "PROVNAME \"PROVNAME\" true true false 200 Text 0 0 ,First,#,In_memory\\censusRoads,PROVNAME,-1,-1", "")
    print "numProv_Wireline created"
except:
    print "Error creating FeatureClass"

del plssDissolve

# Sets workspace for overlap portion of tool.  Made the tool loop through the gdb where the FeatureClasses are located and running the overlap on each FC.
arcpy.env.workspace = gdb
numProvFeatures = gp.ListFeatureClasses()
for np in numProvFeatures:
    if statType not in ("","#","MAX","MIN","MEAN","SUM"):
        message = "ERROR: Specified statistic type " + str(statType) + " is invalid!  Exiting script..."; showPyError(); sys.exit()

        #Process: Makes sure both the statType and statField are specified (if only one of them is, then error)
    if statType in ("MAX","MIN","MEAN","SUM") and statFieldName in ("","#"):
        message = "ERROR: You must also specify a statistic field! Exiting script..."; showPyError(); sys.exit()
    if statType in ("","#") and statFieldName not in ("","#"):
        message = "ERROR: You must also specify a statistic type! Exiting script..."; showPyError(); sys.exit()

        #Process: Makes sure statField is a numeric field
    if statFieldName not in ("","#"):
        fieldList = gp.listfields(inputFC, statFieldName)
        statFieldType = fieldList[0].type
        if statFieldType not in ["Integer","SmallInteger","Double","Single","OID"]:
            message = "ERROR: Specified statistic field (" + str(statFieldName) + " - " + str(statFieldType) + ") is not a numeric field!  Exiting script..."; showPyError(); sys.exit()
    if xyTolerance in ["","#"]:
        xyTolerance = ""
    if polyIdFieldName in ["","#"]:
        polyIdFieldName = "POLY_ID"
    if ovlpCountFieldName in ["","#"]:
        ovlpCountFieldName = "OVLP_COUNT"
    if decimalTolerance in ["","#"]:
        decimalTolerance = 16
    if statType in ["","#"]:
            statType = ""

    #Process: Defines the names of some processing layers and other variables
    shatteredFC = "in_memory\\shattered"
    singlePartFC = "in_memory\\single_part"
    statFieldNameTemp = "XOXOXOXOXO"

    #Process: Union "fl" with itself
    message = "Shattering " + np + "..."
    print "shattering " + np
    gp.Union_analysis(np, shatteredFC, "ALL", xyTolerance, "GAPS")
    print "Union Complete"
    #Process: Adds 'polyIdFieldName' and 'ovlpCountFieldName' to shatteredFC
    gp.AddField_management(shatteredFC, polyIdFieldName, "LONG")
    gp.AddField_management(shatteredFC, ovlpCountFieldName, "LONG")
    if statType != "":
        if statType == "MEAN":
            gp.AddField_management(shatteredFC, statFieldNameTemp, "DOUBLE")
        elif statType in ("MAX","MIN","SUM") and statFieldType in ("Integer","SmallInteger","OID"):
            gp.AddField_management(shatteredFC, statFieldNameTemp, "LONG")
        elif statType in ("MAX","MIN","SUM") and statFieldType in ("Single","Double"):
            gp.AddField_management(shatteredFC, statFieldNameTemp, "DOUBLE")
        else:
            message = "ERROR: Can't establish field type of " + str(statFieldName) + "! Exiting script..."; showPyError(); sys.exit()

    #Process: Breaks shatteredFC into single part features
    message = "Breaking into singlepart shapes..."
    try:
        gp.MultipartToSinglepart_management(shatteredFC, singlePartFC)
        print "made single part"
    except:
        message = "ERROR: Unable to break into singlepart shapes (see gp error message below)! Exiting script..."; showPyError(); sys.exit()

    #Process: Delete in_memory\\shattered
    gp.Delete_management(shatteredFC, "FeatureClass")

    #Process: Populates 'polyIdFieldName' and 'ovlpCountFieldName' and 'statFieldName'
    message = "Searching for overlapping features..."
    shapeFieldName = gp.describe(singlePartFC).shapefieldname
    polyIdDict = {}
    polyIdValue = 1
    ovlpCount = 1
    searchRows = gp.searchcursor(singlePartFC)
    searchRow = searchRows.next()
    while searchRow:
        shapeFieldValue = searchRow.getvalue(shapeFieldName)
        xCentroidValue = round(float(str(shapeFieldValue.centroid.x).replace(",",".")), int(decimalTolerance)) #comma replacement is for our European friends
        yCentroidValue = round(float(str(shapeFieldValue.centroid.y).replace(",",".")), int(decimalTolerance))
        areaValue = round(float(str(shapeFieldValue.area).replace(",",".")), int(decimalTolerance))
        axyValue = (xCentroidValue,yCentroidValue,areaValue)
        if statFieldName != "":
            statFieldValue = searchRow.getvalue(statFieldName)
        if axyValue in polyIdDict:
            polyIdDict[axyValue][1] = polyIdDict[axyValue][1] + 1
            if statFieldName != "" and statFieldValue != None:
                polyIdDict[axyValue][2].append(statFieldValue)
        else:
            if statFieldName != "" and statFieldValue == None:
                polyIdDict[axyValue] = [polyIdValue,ovlpCount,[]]
            elif statFieldName != "" and statFieldValue != None:
                polyIdDict[axyValue] = [polyIdValue,ovlpCount,[statFieldValue]]
            else:
                polyIdDict[axyValue] = [polyIdValue,ovlpCount]
            polyIdValue = polyIdValue + 1
        searchRow = searchRows.next()
    del searchRow
    del searchRows
    message = "Populating summary fields..."
    updateRows = gp.updatecursor(singlePartFC)
    updateRow = updateRows.next()
    while updateRow:
        shapeFieldValue = updateRow.getvalue(shapeFieldName)
        xCentroidValue = round(float(str(shapeFieldValue.centroid.x).replace(",",".")), int(decimalTolerance)) #comma replacement is for our European friends
        yCentroidValue = round(float(str(shapeFieldValue.centroid.y).replace(",",".")), int(decimalTolerance))
        areaValue = round(float(str(shapeFieldValue.area).replace(",",".")), int(decimalTolerance))
        axyValue = (xCentroidValue,yCentroidValue,areaValue)
        updateRow.SetValue(polyIdFieldName, polyIdDict[axyValue][0])
        updateRow.SetValue(ovlpCountFieldName, polyIdDict[axyValue][1])
        if statFieldName != "":
            if len(polyIdDict[axyValue][2]) == 0: #If there are no values to summarize (e.g. they were all NULL values)
                pass #don't do anything
            else:
                if statType == "MAX":
                    polyIdDict[axyValue][2].sort(None,None,True)
                    updateRow.SetValue(statFieldNameTemp, polyIdDict[axyValue][2][0])
                elif statType == "MIN":
                    polyIdDict[axyValue][2].sort()
                    updateRow.SetValue(statFieldNameTemp, polyIdDict[axyValue][2][0])
                elif statType == "SUM":
                    itemSum = 0
                    for item in polyIdDict[axyValue][2]:
                        itemSum = itemSum + item
                    updateRow.SetValue(statFieldNameTemp, itemSum)
                elif statType == "MEAN":
                    itemCount = len(polyIdDict[axyValue][2])
                    itemSum = 0
                    for item in polyIdDict[axyValue][2]:
                        itemSum = itemSum + item
                    updateRow.SetValue(statFieldNameTemp, itemSum / float(itemCount))
        updateRows.UpdateRow(updateRow)
        updateRow = updateRows.next()
    del updateRow
    del updateRows
    del polyIdDict
    print "finished centroid..."
    #Process: Dissolves singlePartFC
    message = "Creating planarized output..."
    arcpy.Dissolve_management(singlePartFC, np, ovlpCountFieldName, "", "MULTI_PART")
    arcpy.AddField_management(np,"NumberofProviders", "SHORT")
    arcpy.CalculateField_management(np,"NumberofProviders","[OVLP_COUNT]", "VB")
    arcpy.DeleteField_management(np,ovlpCountFieldName)
    #Process: Deletes in_memory\\single_part
    gp.Delete_management(singlePartFC, "FeatureClass")
