# ---------------------------------------------------------------------------
# Midmile.py
# Created on: 2013-04-12 15:41:18.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# ASSUMPTIONS: If a point feature is input, it is assumed it is a empty feature class with no fields.
# Any tables input will have the following fields: PROVALIAS,LATITUDE,LONGITUDE, BHTYPE, BHCAPACITY, OWNERSHIP, ELEVFEET.
# This tool will create the necessary fields for data delivery for an empty point feature class.  It will take a table that is in
# proper format and uploaded to your local staging template processed folder, which will then be ready for staging.
# FUTURE ENHANCEMENTS: More checks to ensure proper data is used...
#Created by Kass Rezagholi
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os
import sys
import string

# Script arguments
arcpy.env.workspace = arcpy.GetParameterAsText(0)
featureInput = arcpy.GetParameterAsText(1)
censusBlocks = arcpy.GetParameterAsText(2)
midmileTemplate = arcpy.GetParameterAsText(3)
batchKML = arcpy.GetParameterAsText(4)

# Local variables:
tempLocation = "towerTempLocation"
testingXY = arcpy.env.workspace
midmileEmptyFeature = "midmileEmptyFeature"

#Finds the input data type to determine which script to run
desc = arcpy.Describe(featureInput)
dataType = desc.datasetType
print "Input Data Type: " + desc.datasetType

# If the under inputs a Point Feature Class this script will run
if dataType == "FeatureClass":

# Adding XY Coordinates
    desc = arcpy.Describe(featureInput)
    geometryType = desc.shapeType
    if desc.shapeType == "Point":
        arcpy.AddMessage("Adding XY Coordinates to table.")
        try:
            print "Adding XY Coordinates..."
            arcpy.Copy_management(featureInput, "pointCopy")
            arcpy.AddXY_management("pointCopy")
            arcpy.AddMessage("")
            print "Adding XY Success"
        except Exception as a:
            arcpy.AddError("Could not Add XY Coordinates to feature class.")
            print a

# Process: Spatial Join
        print "Running spatial join..."
        arcpy.AddMessage("Running Spatial Join...")
        try:
            arcpy.SpatialJoin_analysis("pointCopy", censusBlocks, "pointOutput", "JOIN_ONE_TO_ONE", "", "", "WITHIN", "", "")
            print "Spatial join complete"
            arcpy.AddMessage("Spatial Join Success")
        except Exception as a:
            arcpy.AddError("Spatial Join FAILURE.")

# Adds ADDS all necessary fields
        arcpy.AddMessage("Adding required fields for Midmiles...")
        try:
            arcpy.AddField_management("pointOutput", "FULLFIPSID", "TEXT", "", "", "16", "", "NULLABLE", "NON_REQUIRED", "")
            arcpy.AddField_management("pointOutput", "LATITUDE", "DOUBLE", "", "","","","" )
            arcpy.AddField_management("pointOutput", "LONGITUDE", "DOUBLE", "",  "", "", "", "" )
            arcpy.AddField_management("pointOutput", "BHTYPE", "SHORT", "", "", "2", "", "", "", "")
            arcpy.AddField_management("pointOutput", "BHCAPACITY", "SHORT", "", "", "2", "", "", "", "")
            arcpy.AddField_management("pointOutput", "OWNERHSIP", "SHORT", "", "", "2", "", "", "", "")
            arcpy.AddField_management("pointOutput", "PROVALIAS", "TEXT", "", "", "15", "", "", "", "")
            arcpy.AddField_management("pointOutput", "DBNAME", "TEXT", "", "", "200", "", "", "", "")
            arcpy.AddField_management("pointOutput", "ELEVFEET", "TEXT", "", "", "3", "", "", "", "")
            arcpy.AddField_management("pointOutput", "PROVALIAS", "TEXT", "", "", "15", "", "", "", "")
            arcpy.AddMessage("Add fields for Midmiles success.")

        except Exception as a:
            print a
            print "Add field FAILURE"
            arcpy.AddError("Add field FAILED.")

# Process: CALCULATES FULLFIPSID and LAT/LONG
        print "Calculating FULLFIPSID and LAT/LONG..."
        arcpy.AddMessage("Calculating FULLFIPSID and LAT/LONG only...")
        try:
            arcpy.CalculateField_management("pointOutput", "FULLFIPSID", "[GEOID10]", "VB", "")
            arcpy.CalculateField_management("pointOutput", "LATITUDE", "[POINT_Y]", "VB", "")
            arcpy.CalculateField_management("pointOutput", "LONGITUDE", "[POINT_X]", "VB", "")
            arcpy.AddMessage("Fields calculated successful.")
            print "FULLFIPSID and LAT/LONG calculated"
        except Exception as a:
            print a
            print "FULLFIPSID calculate FAILURE"

# Deletes any 'NULL' or '0' and replaces with 'ZZ' for ELEVFEET
        rows = arcpy.UpdateCursor(tableOutput, "", "", "ELEVFEET", "")
        arcpy.AddMessage("Replacing any '0', 'NULL', or empty values in 'ELEVFEET' with 'ZZ'")
        for row in rows:
            if row == "NULL":
                row.ELEVFEET = "ZZ"
                rows.updateRow(row)
                print "Elevfeet cannot be 'NULL', changing to ZZ"
            if row == "":
                row.ELEVFEET = "ZZ"
                rows.updateRow(row)
            elif row.getValue("ELEVFEET") == "0":
                row.ELEVFEET = "ZZ"
                rows.updateRow(row)
                print "Elevfeet cannot be 0, changing to ZZ"
        del rows, row

# Checks to see if there is an outlier midmile
        arcpy.AddMessage("Validating")
        rows = arcpy.UpdateCursor("pointOutput", "", "", "FULLFIPSID", "")
        try:
            for row in rows:
                if row.isNull('FULLFIPSID'):
                    arcpy.AddMessage("fullfipsid is NULL, sheck to see if located inside Colorado. OBJECTID:")
                    arcpy.AddError(row.getValue("ObjectID"))
                    print "fullfipsid is NULL, sheck to see if located inside Colorado. OBJECTID:"
                    print row.getValue("ObjectID")
            arcpy.AddMessage("CHECK COMPLETE")
            print "Done."
            del rows, row
        except:
            arcpy.AddMessage("Check Failed.")
            print "Check Failed."

# If input is a polygon or polyline the script will stop.
    elif desc.shapeType == "Polygon":
        try:
            print "ERROR: INPUT MUST BE POINT OR DBASE TABLE"
            arcpy.AddError("INPUT MUST BE POINT FEATURE CLASS")
        except Exception as a:
            print a
            print "Not a polygon."

    elif desc.shapeType == "Polyline":
        try:
            print "ERROR: INPUT MUST BE POINT FEATURE CLASS"
        except Exception as a:
            print a
            arcpy.AddMessage("Not a polyline.")

# If there is an input for Tables then this script will run.
if dataType == "Table":
    try:
        arcpy.AddMessage("Creating XY from Table")
        arcpy.MakeXYEventLayer_management(featureInput, "LONGITUDE", "LATITUDE", "towerTempLocation", "", "")
        print "XY event layer complete"
    except Exception as a:
        print a
        print "XY event layer creation FAILURE"

# Process: Spatial Join
    print "Running spatial join..."
    arcpy.AddMessage("Running spatial join...")
    try:
        arcpy.SpatialJoin_analysis(tempLocation, censusBlocks, "tableOutput", "JOIN_ONE_TO_ONE", "", "", "WITHIN", "", "")
        print "Spatial join complete"
    except Exception as a:
        print a
        print "Spatial join FAILURE"

# Checks the ELEVFEET Input
    rows = arcpy.UpdateCursor("tableOutput", "", "", "ELEVFEET", "")
    for row in rows:
        if row.getValue("ELEVFEET") == 0:
            row.ELEVFEET = "-9999"
            rows.updateRow(row)
        if row.getValue("ELEVFEET") == "NULL":
            row.ELEVFEET = "-9999"
            rows.updateRow(row)
        if row.getValue("ELEVFEET") == "":
            row.ELEVFEET = "-9999"
            rows.updateRow(row)
        if row.getValue("ELEVFEET") == "ZZ":
            row.ELEVFEET = "-9999"
            rows.updateRow(row)
        elif row.getValue("ELEVFEET") > 300:
            print "ELEVFEET ABOVE 300 DETECTED, ENSURE THIS IS CORRECT"
            arcpy.AddMessage("ELEVFEET ABOVE 300 DETECTED, ENSURE THIS IS CORRECT")
    del rows, row

# Process: ADDS FULLFIPDSID
    print "Adding FULLFIPSID..."
    try:
        arcpy.AddField_management("tableOutput", "FULLFIPSID", "TEXT", "", "", "16", "", "NULLABLE", "NON_REQUIRED", "")
        print "Add field complete"
    except Exception as a:
        print a
        print "Add field FAILURE"

# Process: CALCULATES FULLFIPSID
    print "Calculating FULLFIPSID..."
    try:
        arcpy.CalculateField_management("tableOutput", "FULLFIPSID", "[GEOID10]", "VB", "")
        print "FULLFIPSID calculated"
    except Exception as a:
        print a
        print "FULLFIPSID calculate FAILURE"
    arcpy.AddMessage("Validating")
    rows = arcpy.UpdateCursor("tableOutput", "", "", "FULLFIPSID", "")

# Checks to see that all features are located within Colorado and Flags them if they are
    try:
        for row in rows:
            if row.isNull('FULLFIPSID'):
                arcpy.AddMessage("FULLFIPSID is NULL, sheck to see if located inside Colorado. OBJECTID: ")
                arcpy.AddError(row.getValue("ObjectID"))
                print "fullfipsid is NULL, sheck to see if located inside Colorado. OBJECTID:"
                print row.getValue("ObjectID")
        arcpy.AddMessage("CHECK COMPLETE")
        print "Done."
        del rows, row
    except Exception as a:
        arcpy.AddMessage("Check Failed.")
        print "Check Failed."

# Process: LOADS TO STAGING TEMPLATE
    print "Loading to staging template..."
    try:
        arcpy.Append_management("tableOutput", midmileTemplate, "NO_TEST", "", "")
        print "Loaded to staging template"
    except Exception as a:
        print a
        print "Staging template append FAILURE"

# Batch KML/KMZ process
if batchKML <>"":

# Changes workspace
    arcpy.env.workspace = batchKML

# Convert all KMZ and KML files found in the current workspace
for kmz in arcpy.ListFiles('*.KM*'):
    print "CONVERTING: " + os.path.join(batchKML,kmz)
    arcpy.KMLToLayer_conversion(kmz, arcpy.env.workspace)

